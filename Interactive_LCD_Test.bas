#define enable_debug 0

#include "__LIB/AB_Extensions.lib"

#define enable_lcd_debug 0

#include "LCD\LCD_Support.lib"
#include "SPK\SPK_support.lib"

MAIN:

	DIM X AS INTEGER
	DIM TEST$(100) AS STRING
	DIM LCD_CHAR_NUM AS INTEGER
	DIM LCD_CHAR_DATA1 AS INTEGER
	DIM LCD_CHAR_DATA2 AS INTEGER
	
	' this is where filepp with math capabilities is useful (hence I mod'd BASICtools.tcl to meet my needs)
	
#define LCD_DISP_Buffer_Size	mul(add(LCD_MAX_COLUMN,1),add(LCD_MAX_ROW,1))
	
	DIM LCD_DISP_Buffer(LCD_DISP_Buffer_Size) as integer


	LCD_DEBUG(if(SPK_BEEP(3500, 1, 5)) then Print "Error!")
	
	LCD_INIT_IO
	LCD_INIT_MODULE
	LCD_DISP_CNTL (LCD_DISPLAY_ON, LCD_LINE_CURS_OFF, LCD_BLOCK_CURS_OFF)

	do
	
	bleep
	TEST$="TEST'G STRG SEND"	
	LCD_DISP_RESET
	LCD_STRG_SEND(TEST$)
	WAIT(2000)
	
	GOSUB LCD_DISP_RESET
	TEST$="TESTING RND SEND"
	GOSUB LCD_STRG_SEND(TEST$)
	WAIT(1000)

	FOR LCD_ROW = 0 TO LCD_MAX_ROW
		FOR LCD_COLUMN = 0 TO LCD_MAX_COLUMN
			GOSUB LCD_CHAR_SEND_XY(RAND_BIT_WIDTH(TIMER,8),LCD_COLUMN,LCD_ROW)
		NEXT LCD_COLUMN
	NEXT LCD_ROW
	WAIT(2000)
	
	FOR LCD_ROW = 0 TO LCD_MAX_ROW
		FOR LCD_COLUMN = 0 TO LCD_MAX_COLUMN
			GOSUB LCD_SET_DRAM_ADDR(LCD_CALC_CELL_ADDR(LCD_COLUMN, LCD_ROW))
			PRINT LCD_CHAR_GET,
		NEXT LCD_COLUMN
	NEXT LCD_ROW
	WAIT(2000)
	
PRINT
PRINT "BLANKING DISPLAY FOR A BIT..."
		
	GOSUB LCD_DISP_OFF
	WAIT(1000)
	GOSUB LCD_DISP_ON

PRINT "DISPLAY BACK ON..."
	WAIT(2000)
	
	FOR LCD_ROW = LCD_MAX_ROW DOWNTO 0
		FOR LCD_COLUMN = LCD_MAX_COLUMN DOWNTO 0
			PRINT LCD_CHAR_GET_XY(LCD_COLUMN, LCD_ROW),
		NEXT LCD_COLUMN
	NEXT LCD_ROW
	PRINT
	
	GOSUB LCD_DISP_CLEAR
	
	FOR LCD_ROW = 0 TO LCD_MAX_ROW
		FOR LCD_COLUMN = 0 TO LCD_MAX_COLUMN
			GOSUB LCD_CURS_SET_XY(LCD_COLUMN, LCD_ROW)
			GOSUB LCD_CURS_SET_TYPE(LCD_CURS_TYPE_LINE)
			WAIT(50)
			GOSUB LCD_CURS_SET_TYPE(LCD_CURS_TYPE_BLOCK)
			WAIT(50)
			GOSUB LCD_CURS_SET_TYPE(LCD_CURS_TYPE_BOTH)
			WAIT(50)
			GOSUB LCD_CURS_SET_TYPE(LCD_CURS_TYPE_OFF)
		NEXT LCD_COLUMN            
	NEXT LCD_ROW

	GOSUB LCD_DISP_FILL(42)
			GOSUB LCD_CURS_SET_TYPE(LCD_CURS_TYPE_BLOCK)
	WAIT(500)
	GOSUB LCD_STRG_SEND_XY("THIS IS A TEST", 1, 1)
	
	GOSUB LCD_CHAR_SEND_XY ("-", 5, 1)
	
	GOSUB LCD_CURS_SHFT_LEFT(5)
	WAIT(1000)
	GOSUB LCD_CURS_SHFT_RIGHT(2)
	WAIT(1000)
	GOSUB LCD_DISP_SHFT_LEFT(2)
	WAIT(1000)
	GOSUB LCD_DISP_SHFT_RIGHT(3)
	WAIT(1000)
	GOSUB LCD_CURS_SET_XY(39, 0)
	WAIT(1000)
	GOSUB LCD_DISP_HOME
	WAIT(1000)
	GOSUB LCD_CURS_SET_XY(39, 0)
	WAIT(1000)
	GOSUB LCD_CURS_HOME
	
	LCD_CHAR_NUM = 0
	LCD_CHAR_DATA1 = $01010101
	LCD_CHAR_DATA2 = $01010101
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(00)
	WAIT(1000)

	
	LCD_CHAR_NUM = 1
	LCD_CHAR_DATA1 = $01020408
	LCD_CHAR_DATA2 = $08040201
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(01)
	WAIT(1000)

	
	LCD_CHAR_NUM = 2
	LCD_CHAR_DATA1 = $08040201
	LCD_CHAR_DATA2 = $01020408
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(02)
	WAIT(1000)

	LCD_CHAR_NUM = 3
	LCD_CHAR_DATA1 = $110A050A
	LCD_CHAR_DATA2 = $0A050A11
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(03)
	WAIT(1000)

	
	LCD_CHAR_NUM = 4
	LCD_CHAR_DATA1 = $FFFFFFFF
	LCD_CHAR_DATA2 = $01010101
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(04)
	WAIT(1000)

	
	LCD_CHAR_NUM = 5
	LCD_CHAR_DATA1 = $01010101
	LCD_CHAR_DATA2 = $FFFFFFFF
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(05)
	WAIT(1000)

	LCD_CHAR_NUM = 6
	LCD_CHAR_DATA1 = $10101010
	LCD_CHAR_DATA2 = $000000FF
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(06)
	WAIT(1000)

	
	LCD_CHAR_NUM = 7
	LCD_CHAR_DATA1 = $11111111
	LCD_CHAR_DATA2 = $00000000
	GOSUB LCD_CHAR_MAKE(LCD_CHAR_NUM, LCD_CHAR_DATA1, LCD_CHAR_DATA2)
	GOSUB LCD_DISP_FILL(07)
	WAIT(1000)
	GOSUB LCD_CURS_SHFT_UP
	WAIT(1000)
	GOSUB LCD_CURS_SHFT_DOWN
	WAIT(1000)
	GOSUB LCD_CURS_SHFT_RIGHT(2)
	WAIT(1000)
	GOSUB LCD_CURS_SHFT_DOWN
	WAIT(1000)
	FOR X = 1 TO 40
	 	GOSUB LCD_DISP_SHFT_LEFT(1)
		WAIT(200)
	NEXT X
	 FOR X = 1 TO 40
	 	GOSUB LCD_DISP_SHFT_RIGHT(1)
		WAIT(200)
	NEXT X

	LCD_DISP_RESET

	loop

END
