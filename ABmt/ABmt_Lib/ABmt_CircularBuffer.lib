' ========================================================================================
'
'	ABmt (Multi-Threaded ARMbasic): CHB - Circular History Buffer Driver
'
'
'	'  Revision History
'
'v 0.02		02Dec18	Initial Release
'	â€¢	ample comments/diatribe and code will eventually be descriptive of implementation
'	-	added logic to be able to have the WDT run in interrupt mode to enable traping of
'		WDT reset event, and the event handler will then force a device reset 
'		a device reset will be implemented by way of setting WDT reset with a period of 1 clock cycle
'
' TODO/FIXME: 
'	-	Consider having variables to define the event count and pass it as an init option
'		EDIT:  Nope, won't work, as variable space is done at compiletime not runtime
'		EDIT2: Unless we create a set of memory pools with huge array definitions at compile
'	-	Use preprocessor directives to expand this to handle both the 824 and 54102 (54102 currently)
'	-	lots of other stuff... :)
'
' ========================================================================================
#ifndef ABmt_CHBLibVersion			'~~ 'single Load' construct 
	#define ABmt_CHBLibVersion	"0.02"

	#ifndef enabledchb		// This lib requires a #def prior to inclusion
		#error You must #define enabledchb prior to #including the ABmt_CircularBuffer.lib	'~

	#else	' enabledchb is defined
		#warning Circular History Buffer for event tracing is enabled	'~

		#define CORE_M4
		#include "LPC54102.bas"
		
		#define ABmt_Module_Name		"ABmt_CircularHistoryBuffer"

		#ifdef __CORIDIUM__	' danger will robinson, BT's BPP doesn't support non-boundary (intra-token) macro expansion
			#error ABmt is written to be used with the FilePP Preprocessor, to facilitate more robust compile-time functionality than what BT`s BPP can offer
		#else	' with FilePP, intra-token macro expansion works, but path resolution behavior is different than BT's BPP
			#define debug(args...) args
			dim temp as integer
			#define debug_in(args...) print args __NEWLINE__ debugin temp
		#endif	

		'~~ // ABE #Include Prototype
		' #define ABE_Generic				' Generic #defs to ease programming
		' #define ABE_Bitwise				' Bitwise Operations
		' #define ABE_FloatHelpers			' Floating Point Helping routines - to include NAN testing and such
		' #define ABE_RNG					' Random Number Generator - xbit integer, floating point 0-1, bounded (min/max), etc.
		' #define ABE_SortHelpers			' helper code to facilitate sorting
		' #define ABE_ASCStuffs				' Silly code with several instances of ASC therein
		' #define ABE_DDR					' Data Direction Port save-restore - deprecated until built up for multiple targets, esp w/ > 32 GPIO pins...
		' #define ABE_Suspend				' Subs/Functions for halting program execution
		#define enabledebug 1				' This is needed for the ABE_Debug stuffs - 0 disables debug() wrapped code & enables production() wrapped code - vice versa
		#define ABE_Debug					' to enable programmatic debug support - need to expand for proper debugger use and multiple devices - #define enabledebug 1 to use
		' #define ABE_TargetRegHelpers		' helper code to facilitate register exploration and manipulation - need to add masks and nibble/word/etc. support
		' #define ABE_StringStuffs			' helper code to facilitate enhanced string functionality
		#define ABE_Conversion			' A robust lib of helpers for converting across different formats (i2b, i2h, a2i, etc.)
		' #define ABE_UserInput				' Subs/Functions for facilitating user input into the BT console

		#include "..\__lib\AB_Extensions.lib"	'~

		'~~ //_CHB Memory Setup
		#define	_CHB_Table_EventCount	128
		#define _CHB_Event_ItemWidth	4	// each event item is 4B/1W wide
		#define _CHB_Event_ItemCount	4	// each event has 4 field
		#define _CHB_Event_ByteSize		(_CHB_Event_ItemCount * _CHB_Event_ItemWidth)
		#define _CHB_Table_Size			(_CHB_Table_EventCount * _CHB_Event_ByteSize)

		#define _CHB_Event_Sequencer	1
		#define _CHB_Event_Timestamp	2
		#define _CHB_Event_ModuleID		3
		#define _CHB_Event_Data			4

		#define _CHB_Null				0xdeadbeef	'~

// TCB Vitals Register Visual
// |3322222|2222211111|11111|0000000000|
// |1098765|4321098765|43210|9876543210|
// |.Flags.|..System..|.Pri.|..TaskID..|
//	---Task Vital Flags (8 bits ATM)---
//  H									1=Hardware		0=Non-HW
//   E									1=External		0=SW or On-Chip
//    K									1=Kernel		0=UserTask
//	   R								1=Root_Task		0=Spawned Task
//      I								1=ISR			0=Non-ISR
//		 D								1=Data			0=Time (4th word)
//		  D								1=Pointer		0=Literal (4th word)
//  ---Task System/Family (8 bits ATM)---							
//          1							Root System Startup/Initialize
//           1							TaskMgmt Start/Stop/...
//            1							ListMgmt Prioritization/Sequending
//             1						QueueMgmt Mutex/Semaphores/Messages
//              1							
//               1						Triggers/Interrupts
//                1						Timing/Sequencing
//                 1					Input/Output
//	---Task Priority (5 bits ATM 0 to 63)---
//                  PPPPPP				Task Priority
//	---Task ID (10 bits ATM0 to 4095)---
//                        ##########	TASK ID

		'~~ //_CHB Task Flags
		#define _CHB_Flag_Hardware		1<<31
		#define _CHB_Flag_External		1<<30
		#define _CHB_Flag_Kernel		1<<29
		#define _CHB_Flag_Root_Task		1<<28
		#define _CHB_Flag_ISR			1<<27	'~

		'~~ // these 2 flag states are for asserting what is in the data field of the CHB
		#define _CHB_Flag_Data			1<<26
'		#define _CHB_Flag_Time			not(_CHB_Flag_Data)

		#define _CHB_Flag_Pointer		1<<25
'~		#define _CHB_Flag_Literal		not(_CHB_Flag_Pointer)

		'~~ //_CHB Source  // Define bits to enable/disable circular history debugging for various systems/subsystems
		#define _CHB_Sys_Scheduler		1<<24

		#define _CHB_Sys_TaskMgmt		1<<23
		#define _CHB_Sys_ListMgmt		1<<22
		#define _CHB_Sys_QueueMgmt		1<<21
		#define _CHB_Sys_ErrDbgLog		1<<20

		#define _CHB_Sys_tbd			1<<19

		#define _CHB_Sys_SubSysID2		1<<18
		#define _CHB_Sys_SubSysID1		1<<17
		#define _CHB_Sys_SubSysID0		1<<16

		#define _CHB_Sys_x				1<<15
		#define _CHB_Sys_y				1<<14
		#define _CHB_Sys_z				1<<13	'~

		'~~ //_CHB TaskID Mask		
		#define _CHB_TaskID_Mask		0xfff	'~ <=4096 Task IDs (0 to 4095)

		_CHB_InitModuleGlobals:	'~~
			dim _CHB_Table(_CHB_Table_Size/_CHB_Event_ItemWidth) as integer
			dim _CHB_Flagged_TaskReg as integer
			dim _CHB_Table_ptr as integer 
			dim _CHB_Event_ptr as integer 
			dim _CHB_SysEnable as integer	// register for enables - also flags and event id 
			dim _CHB_TableEnd_ptr as integer
			dim _CHB_Event_Sequence as integer		// counter for event sequences
			_CHB_Table_ptr = addressof _CHB_Table	// Pointer to Start of Table
			_CHB_Event_ptr = _CHB_Table_ptr
			ABmt_Module = ABmt_Module_Name
			return	'~

		Sub _CHB_WipeHistory()
			dim i as integer
			i = _CHB_Table_ptr
			do
				*i = 0xda7aba5e
				i+=4
				*i = 0xa55e55ed
				i+=4
				*i = 0xb007ab1e
				i+=4
				*i = 0x7a7700ed
				i+=4
			until i = (_CHB_Table_ptr + _CHB_Table_Size)
			_CHB_TableEnd_ptr = i-1
			_CHB_Event_Sequence = 0
			endsub
			
		sub _CHB_enableSubsystem(bit)
			_CHB_SysEnable or= bit
			endsub

		sub _CHB_disableSubsystem(bit)
			_CHB_SysEnable and= not bit
			endsub

		sub _CHB_EventAdd(Flagged_Source as integer, EventData as integer)
			// check if system/subsystem enabled
			
			// write the event to the circular history buffer
			
			*(_CHB_Event_ptr) = _CHB_Event_Sequence
			*(_CHB_Event_ptr+0x4) = timer
			*(_CHB_Event_ptr+0x8) = Flagged_Source
			*(_CHB_Event_ptr+0xC) = EventData

			_CHB_Event_Sequence += 1
			_CHB_Event_ptr += _CHB_Event_ByteSize  // increase pointer 
			if _CHB_Event_ptr > _CHB_TableEnd_ptr then _CHB_Event_ptr = _CHB_Table_ptr

			endsub

		sub _CHB_Event(Event_Source, Event_Time, msg)
			' // if this is called, then no data, so pass pointer to module name to it
			' // build out flags
			
			' // build out the task names
			
			' // build out pointer or time
			
			

			endsub

		Sub _CHB_init  // Enable System Historization
			' _CHB_SysEnable or= _CHB_Sys_Scheduler
			' _CHB_SysEnable or= _CHB_Sys_TaskMgmt
			' _CHB_SysEnable or= _CHB_Sys_ListMgmt
			' _CHB_SysEnable or= _CHB_Sys_QueueMgmt
			
			' _CHB_SysEnable or= _CHB_Sys_Logging	
			' _CHB_SysEnable or= _CHB_Sys_Error	
			' _CHB_SysEnable or= _CHB_Sys_Debug	
			' _CHB_SysEnable or= _CHB_Sys_Tuning
			
			gosub _CHB_InitModuleGlobals

			_CHB_WipeHistory
			_CHB_Event_Sequence = 0
			_CHB_EventAdd(0x57edfa57, 0xb00b1e55)
			endsub
			
		sub _CHB_print
		
			dim i, idx, itimer as integer
			dim mstime as single
			i = _CHB_Event_ptr-_CHB_Event_ByteSize
			if i < _CHB_Table_ptr then i = _CHB_TableEnd_ptr
			idx = 1

			print "*********** history *************"
			print "Last ";_CHB_Table_EventCount;" Events (most recent first):"
			print
			print "Line","Event","Time (mS)","","From","","Data"
			do
				' print "Addy: 0x";i2h(i);" | ",
'				print "Line: ";idx,"", ';" @ 0x";i2h(i);" | ",	'loop count and reference address
				print idx, ';" @ 0x";i2h(i);" | ",	'loop count and reference address
				' print "Event #: 0x";i2h(*(i));" | ",	'_CHB_Event_Sequence
				print *(i),	'_CHB_Event_Sequence
				' print "@ Time: 0x";i2h(*(i+0x4));" | ",	'timer

'				print i2h(*(i+0x4)),"|",	'timer
' make the time user friendly here, in the form of xxxxx.yyy mS
				itimer = *(i+0x4)
				mstime = 1.0 * itimer / 1000
				print mstime,"",
				print i2h(*(i+0x8)),"",	'Flagged_Source
				print i2h(*(i+0xC))	'EventData
				idx += 1
				i-=_CHB_Event_ByteSize
				if i < _CHB_Table_ptr then i = (_CHB_TableEnd_ptr+1)-_CHB_Event_ByteSize
			until i = _CHB_Event_ptr-_CHB_Event_ByteSize
			
			print "*********** end history *************"

		endsub





	#endif

#endif
