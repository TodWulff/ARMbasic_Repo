#ifndef ABRTOS_SEMAPHORE_SUPPORT
#define ABRTOS_SEMAPHORE_SUPPORT

#if 1	' MODULE-SPECIFIC LOG-RELATED DEFINES

	#define ABRTOS_MOD		ABRTOS_LOG_MOD_SEMA

	#define	ABRTOS_SEMA_SETUP_STARTED				0
	#define	ABRTOS_SEMA_SETUP_COMPLETE				1

	#define	ABRTOS_SEMA_INITSEMA_STARTED			2
	#define ABRTOS_SEMA_INITSEMA_SEMAINITOK			3
	#define ABRTOS_SEMA_INITSEMA_SEMAINITERR		4
	#define ABRTOS_SEMA_INITSEMA_SEMANUMOOR			5
	#define ABRTOS_SEMA_INITSEMA_BADPRAMS			19
	#define	ABRTOS_SEMA_INITSEMA_COMPLETE			6

	#define ABRTOS_SEMA_XGET_SEMA_STARTED			7
	#define ABRTOS_SEMA_XGET_OK_DECREMENTED			8
	#define ABRTOS_SEMA_XGET_BUSY_WAIT				9
	#define ABRTOS_SEMA_XGET_UNINITIALIZED			10
	#define ABRTOS_SEMA_XGET_SEMANUMOOR				11
	#define ABRTOS_SEMA_XGET_SEMA_COMPLETED			12

	#define ABRTOS_SEMA_GET_SEMA_STARTED			13
	#define ABRTOS_SEMA_GET_OK						14
	#define ABRTOS_SEMA_GET_BUSY_WAIT				15
	#define ABRTOS_SEMA_GET_SEMANUMOOR				16
	#define ABRTOS_SEMA_GET_SEMA_UNINITD			17
	#define ABRTOS_SEMA_GET_SEMA_COMPLETED			18

#endif

#if 1	' MODULE CONFIG DEFINES AND GLOBAL DECLARATIONS

	' #define ABRTOS_SEMA_MAX_SEMA_LIMIT 16
	' #define ABRTOS_SEMA_INIT_COUNT		6
	' #define ABRTOS_SEMA_SEMAPHORE_COUNT	ABRTOS_SEMA_INIT_COUNT		' PUT VERBOSE DEFS BELOW...

		' MAKING USE OF THE PREPROCESSOR'S COMPILE-TIME MATH CAPABILITIES HERE...
		
	#define ABRTOS_SEMA_POINTER_INDEX	mul(add(int(div(sub(ABRTOS_INIT_MAX_TASKS,1), 32)),1),4)  	'*
	#define	ABRTOS_SEMA_BLOCK_WIDTH		sub(mul(add(int(div(sub(ABRTOS_INIT_MAX_TASKS,1), 32)),1),ABRTOS_SEMA_SEMAPHORE_COUNT),1)  	'* '*
	DIM ABRTOS_SEMA_BLOCK(ABRTOS_SEMA_BLOCK_WIDTH) AS INTEGER				' INSTANTIATES THE WHOLE SEMAPHORE BLOCK
	DIM ABRTOS_SEMA_SEMAPHORE_VALUE(sub(ABRTOS_SEMA_SEMAPHORE_COUNT,1)) AS INTEGER		 '*
	DIM ABRTOS_SEMA_SEMAPHORE_MAXVALUE(sub(ABRTOS_SEMA_SEMAPHORE_COUNT,1)) AS INTEGER	 '*
	DIM ABRTOS_SEMA_SEMAPHORE_QUEPTR(sub(ABRTOS_SEMA_SEMAPHORE_COUNT,1)) AS INTEGER		 '*
	
#endif

SUB ABRTOS_SEMA_STARTUP_INIT

	DIM ABRTOS_SEMA_COUNTER AS INTEGER
	DIM ABRTOS_SEMA_TEMPPOINTER AS INTEGER

	' THE SEMAPHORE 'BLOCK' WAS ALLOCATED IN ABRTOS_DEFS.BAS VIA THE DIM'G
	' OF A SINGLE VARIABLE TO THE APPROPRIATE SIZE.
	' THIS SUB SETS UP THE POINTERS TO EACH SEMAPHORE WITHIN THE 'BLOCK'.
	' EACH SEMAPHORE IS X BITS WIDE, WHERE X IS A MULTIPLE OF 32, BASED
	' ON THE MAX NUMBER OF TASKS THAT CAN BE INSTANTIATED BY THE USER
	' THE 'BLOCK' ALLOCATION AND POINTER GENERATION ARE FULLY AUTOMATED.
	
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_SETUP_STARTED)
	#endif

	FOR ABRTOS_SEMA_COUNTER = 0 TO (ABRTOS_SEMA_SEMAPHORE_COUNT-1)
	
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_QUEPTR) + (ABRTOS_SEMA_COUNTER * 4)
		*ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_BLOCK) + (ABRTOS_SEMA_COUNTER * ABRTOS_SEMA_POINTER_INDEX)
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_VALUE) + (ABRTOS_SEMA_COUNTER * 4)
		*ABRTOS_SEMA_TEMPPOINTER = -1
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_MAXVALUE) + (ABRTOS_SEMA_COUNTER * 4)
		*ABRTOS_SEMA_TEMPPOINTER = 0
		
	NEXT ABRTOS_SEMA_COUNTER
	
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_SETUP_COMPLETE)
	#endif
	
ENDSUB

FUNCTION ABRTOS_SEMA_INIT_SEMAPHORE(SEMA_ID, CURR_COUNT, MAX_COUNT)

	DIM ABRTOS_SEMA_INIT_RETURN_VAL AS INTEGER
	DIM ABRTOS_SEMA_TEMPPOINTER AS INTEGER
	
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_INITSEMA_STARTED)
	#endif
	
	IF (SEMA_ID < 0) OR (SEMA_ID > (ABRTOS_SEMA_SEMAPHORE_COUNT-1)) THEN
		ABRTOS_SEMA_INIT_RETURN_VAL = -1
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_INITSEMA_SEMANUMOOR)
	#endif
		' KILL (SUSPEND???) TASK AS TRIED TO USE AN OOR SEMAPHORE #...
		ABRTOS_TASK_CURRENT_KILL
	ELSEIF (CURR_COUNT <= 0) OR (MAX_COUNT <= 0) OR (MAX_COUNT < CURR_COUNT) THEN
		ABRTOS_SEMA_INIT_RETURN_VAL = -1
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_INITSEMA_BADPRAMS)
	#endif
	
		' KILL (SUSPEND???) TASK AS TRIED TO USE AN OOR SEMAPHORE #...
		ABRTOS_TASK_CURRENT_KILL
		
	ELSE
	
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_VALUE) + (SEMA_ID * 4)
		IF *ABRTOS_SEMA_TEMPPOINTER <> -1 THEN 'SEMAPHORE ALREADY IN USE - LOG SAME AND RETURN ERR
			ABRTOS_SEMA_INIT_RETURN_VAL = 0
			
		#if ABRTOS_OPTION_USE_LOGGING == 1
			ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_INITSEMA_SEMAINITERR)
		#endif
		
		' KILL (SUSPEND???) TASK AS TRIED TO USE A SEMAPHORE ALREADY INIT'D...
		ABRTOS_TASK_CURRENT_KILL
		ELSE	' SEMAPHORE IS NOT IN USE, SO INIT IT AND LOG SAME
			*ABRTOS_SEMA_TEMPPOINTER = CURR_COUNT
			ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_MAXVALUE) + (SEMA_ID * 4)
			*ABRTOS_SEMA_TEMPPOINTER = MAX_COUNT
			ABRTOS_SEMA_INIT_RETURN_VAL = CURR_COUNT
			
		#if ABRTOS_OPTION_USE_LOGGING == 1
			ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_INITSEMA_SEMAINITOK)
		#endif
		
		ENDIF
	ENDIF

		#if ABRTOS_OPTION_USE_LOGGING == 1
			ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_INITSEMA_COMPLETE)
		#endif
	
	RETURN ABRTOS_SEMA_INIT_RETURN_VAL
			' <0 = INIT ERROR - BAD PARAMETERS (SEMA # OR COUNTS)
			' =0 = ALREADY INIT'D
			' >0 = INIT OK - CURR_COUNT
ENDFUNCTION

FUNCTION ABRTOS_SEMA_XGET_SEMAPHORE(SEMA_ID)

	DIM ABRTOS_SEMA_XGET_RETURN_VAL AS INTEGER
	DIM ABRTOS_SEMA_TEMPPOINTER AS INTEGER
	
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_XGET_SEMA_STARTED)
	#endif
	
	' BOUNDING COMMENTED OUT AS PARENT SUB PERFORMS SAME...
	
	' IF (SEMA_ID < 0) OR (SEMA_ID > (ABRTOS_SEMA_SEMAPHORE_COUNT-1)) THEN
		' // TOSS OFF IN THE FLIPPING CORNER AS USER TRIED TO USE AN NON-EXISTANT SEMAPHORE...
		' ABRTOS_SEMA_XGET_RETURN_VAL = -1
		' ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_XGET_SEMANUMOOR)			
	' ELSE
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_VALUE) + (SEMA_ID * 4)
		IF *ABRTOS_SEMA_TEMPPOINTER > 0 THEN	' SEMA NOT BUSY SO DECREMENT IT AND RETURN
			*ABRTOS_SEMA_TEMPPOINTER = *ABRTOS_SEMA_TEMPPOINTER - 1
			ABRTOS_SEMA_XGET_RETURN_VAL = 1
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_XGET_OK_DECREMENTED)
	#endif
	
		ELSEIF *ABRTOS_SEMA_TEMPPOINTER = 0 THEN ' SEMA BUSY - NEED TO PUT ABRTOS_TASK_ID_ACTIVETASK INTO QUEUE FOR THIS SEMAPHORE
			ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_QUEPTR) + (SEMA_ID * 4)
			ABRTOS_SEMA_TEMPPOINTER = *ABRTOS_SEMA_TEMPPOINTER + ((ABRTOS_TASK_ACTIVEID/32)*4)
			*ABRTOS_SEMA_TEMPPOINTER = *ABRTOS_SEMA_TEMPPOINTER OR (1 << (ABRTOS_TASK_ACTIVEID MOD 32))
			ABRTOS_SEMA_XGET_RETURN_VAL = 0
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_XGET_BUSY_WAIT)
	#endif
	
		ELSE	' SEMA COUNT IS <0 SO IT IS UN-INITI'D...	
			' TOSS OFF IN THE FLIPPING CORNER AS USER TRIED TO USE AN UN-INIT'D SEMAPHORE...
			ABRTOS_SEMA_XGET_RETURN_VAL = -1
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_XGET_UNINITIALIZED)
	#endif
	
		ENDIF
	' ENDIF

		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_XGET_SEMA_COMPLETED)
	#endif
		
	RETURN ABRTOS_SEMA_XGET_RETURN_VAL
			' -1 = XGET FAIL - BAD SEMA # - UN-INIT'D // OR OUT OF RANGE
			' 0 = WAIT SEMA_BUSY - QUEUED ACTIVE TASK ID
			' 1 = XGET OK_DECREMENTED - CURR_COUNT

ENDFUNCTION

SUB ABRTOS_SEMA_GET_SEMAPHORE(SEMA_ID)

		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_GET_SEMA_STARTED)
	#endif

	IF (SEMA_ID < 0) OR (SEMA_ID > (ABRTOS_SEMA_SEMAPHORE_COUNT-1)) THEN
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_GET_SEMANUMOOR)
	#endif
	
		' KILL (SUSPEND???) TASK AS TRIED TO USE AN OOR SEMAPHORE...
		ABRTOS_TASK_CURRENT_KILL
	ELSE
		DIM ABRTOS_SEMA_GET_TEMP AS INTEGER
		ABRTOS_SEMA_GET_TEMP = ABRTOS_SEMA_XGET_SEMAPHORE(SEMA_ID)
		IF ABRTOS_SEMA_GET_TEMP < 0 THEN
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_GET_SEMA_UNINITD)
	#endif
	
			' KILL (SUSPEND???) TASK AS TRIED TO USE AN UN-INIT'D SEMAPHORE...
			ABRTOS_TASK_CURRENT_KILL
		ELSEIF ABRTOS_SEMA_GET_TEMP = 0 THEN
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_GET_BUSY_WAIT)
	#endif
	
			' NEED TO PUT ABRTOS_TASK_ACTIVEID INTO WAIT AS SEMAPHORE IS BUSY/LOCKED/OUT OF RESOURCES
			ABRTOS_TASK_CURRENT_WAITSEMA
		ELSE
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_GET_OK)
	#endif
	
		ENDIF
	ENDIF
	
		
	#if ABRTOS_OPTION_USE_LOGGING == 1
		ABRTOS_LOG_EVENT(ABRTOS_MOD,ABRTOS_SEMA_GET_SEMA_COMPLETED)
	#endif
		
ENDSUB

SUB ABRTOS_SEMA_XPUT_SEMAPHORE


ENDSUB

SUB ABRTOS_SEMA_PUT_SEMAPHORE


ENDSUB



#endif
