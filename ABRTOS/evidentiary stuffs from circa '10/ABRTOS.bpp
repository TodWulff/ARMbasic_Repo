











	

	

	

	






	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	




		
		
		

		
		
		
		
		



		
		
		



		
		
		

		
		
		

		
		
		
























	
	

	






	

	

	
	
	
	
	
	
	



	
	


	
	


	DIM ABRTOS_STOP_FLAG AS INTEGER
	DIM ABRTOS_TASK_ACTIVEID AS INTEGER
	DIM ABRTOS_TASK_TCB_BLOCK(504) AS INTEGER	
	DIM ABRTOS_TASK_TCB_POINTER(63) AS INTEGER	
	DIM ABRTOS_TASK_STACK_BLOCK(4032) AS INTEGER	
	DIM ABRTOS_TASK_STACKBASE_POINTER(63) AS INTEGER	
	DIM ABRTOS_ROOT_TEMP_REG AS INTEGER
	
	DIM	ABRTOS_MUTEX_MUTEXQUEUE AS INTEGER

	

	







	








DIM ABRTOS_LOG_CNT AS INTEGER

DIM ABRTOS_LOG_EVT(254) AS INTEGER 
DIM ABRTOS_LOG_MOD(254) AS INTEGER 
DIM ABRTOS_LOG_TIM(254) AS INTEGER 
DIM ABRTOS_LOG_ACTTASK(254) AS INTEGER 

DIM ABRTOS_LOG_LAST_EVT AS INTEGER
DIM ABRTOS_LOG_LAST_MOD AS INTEGER
DIM ABRTOS_LOG_LAST_TIM AS INTEGER
DIM ABRTOS_LOG_LAST_ACTTASK AS INTEGER

SUB ABRTOS_LOG_INIT

		
	
		
	
	
	ABRTOS_LOG_CNT = 0
	ABRTOS_LOG_LAST_EVT = -1
	ABRTOS_LOG_LAST_MOD = -1
	ABRTOS_LOG_LAST_TIM = -1
	ABRTOS_LOG_LAST_ACTTASK = -1
	
		
	
		
	

ENDSUB

SUB ABRTOS_LOG_EVENT(ABRTOS_MODULE, ABRTOS_LOG_EVNT)

	ABRTOS_LOG_LAST_MOD = ABRTOS_MODULE
	ABRTOS_LOG_LAST_EVT = ABRTOS_LOG_EVNT
	ABRTOS_LOG_LAST_TIM = TIMER
	ABRTOS_LOG_LAST_ACTTASK = ABRTOS_TASK_ACTIVEID
	*$FFFFF018 = $2							

ENDSUB

SUB ABRTOS_LOG_ISR_HANDLER

	
	

	DIM ABRTOS_LOG_TEMP_STR(24) AS STRING
	DIM ABRTOS_LOG_COUNT AS INTEGER
	DIM ABRTOS_LOG_TEMP_POINTER AS INTEGER
	DIM ABRTOS_LOG_TEMP_OFFSET AS INTEGER
	DIM ABRTOS_LOG_TEMP AS INTEGER

	ABRTOS_LOG_TEMP_POINTER = ADDRESSOF ABRTOS_LOG_CNT	
	ABRTOS_LOG_COUNT = * ABRTOS_LOG_TEMP_POINTER	

	ABRTOS_LOG_COUNT = ABRTOS_LOG_COUNT + 1					
	* ABRTOS_LOG_TEMP_POINTER = ABRTOS_LOG_COUNT
	
	
	
	
	ABRTOS_LOG_TEMP_OFFSET = (((ABRTOS_LOG_COUNT-1) MOD 255) * 4)
	
	ABRTOS_LOG_TEMP_POINTER = ADDRESSOF ABRTOS_LOG_MOD + ABRTOS_LOG_TEMP_OFFSET
	* ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_MOD

	ABRTOS_LOG_TEMP_POINTER = ADDRESSOF ABRTOS_LOG_EVT + ABRTOS_LOG_TEMP_OFFSET
	* ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_EVT
	
	ABRTOS_LOG_TEMP_POINTER = ADDRESSOF ABRTOS_LOG_TIM + ABRTOS_LOG_TEMP_OFFSET
	* ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_TIM
	
	ABRTOS_LOG_TEMP_POINTER = ADDRESSOF ABRTOS_LOG_ACTTASK + ABRTOS_LOG_TEMP_OFFSET
	* ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_ACTTASK
	
	
	PRINT "EVENT #: ";ABRTOS_LOG_COUNT," LOGGED @ TIME: ";
	ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_TIM
	ABRTOS_LOG_TEMP_STR = "00000000000" & STR(ABRTOS_LOG_TEMP_POINTER)
	PRINT RIGHT(ABRTOS_LOG_TEMP_STR,10),
	
	PRINT "ACTIVE TASK ID: ";
	ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_ACTTASK
	ABRTOS_LOG_TEMP_STR = "0" & STR(ABRTOS_LOG_TEMP_POINTER)
	PRINT RIGHT(ABRTOS_LOG_TEMP_STR,2),
	
	ABRTOS_LOG_TEMP_POINTER = * ADDRESSOF ABRTOS_LOG_LAST_MOD
	
	PRINT "MODULE: ";
	ABRTOS_LOG_TEMP = * ADDRESSOF ABRTOS_LOG_LAST_EVT
	ABRTOS_LOG_TEMP_STR = "0" & HEX(ABRTOS_LOG_TEMP)
	ABRTOS_LOG_TEMP_STR = RIGHT(ABRTOS_LOG_TEMP_STR,2)
	
	SELECT ABRTOS_LOG_TEMP_POINTER
		CASE 0
			PRINT "CORE "		,
			SELECT ABRTOS_LOG_TEMP
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 1
			PRINT "LOG  "		,
			SELECT ABRTOS_LOG_TEMP
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 2
			PRINT "WDT  "		,
			SELECT ABRTOS_LOG_TEMP
				CASE 0
					PRINT "ABRTOS_WDT_SETUP_STARTED"
				CASE 1
					PRINT "ABRTOS_WDT_SETUP_COMPLETED"
				CASE 2
					PRINT "ABRTOS_WDT_RESET_START"
				CASE 3
					PRINT "ABRTOS_WDT_RESET_FINISH"
				CASE 4
					PRINT "ABRTOS_WDT_STARTUP_CHECK_START"
				CASE 5
					PRINT "ABRTOS_WDT_STARTUP_CHECK_FINISH"
				CASE 6
					PRINT "ABRTOS_WDT_START_START"
				CASE 7
					PRINT "ABRTOS_WDT_START_FINISH"
				CASE 8
					PRINT "ABRTOS_WDT_FEED_START"
				CASE 9
					PRINT "ABRTOS_WDT_FEED_FINISH"
				CASE 10
					PRINT "ABRTOS_WDT_SET_MODE_START"
				CASE 11
					PRINT "ABRTOS_WDT_SET_MODE_FINISH"
				CASE 12
					PRINT "ABRTOS_WDT_THE_DOG_WAS_FED"
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 3
			PRINT "DEBUG"	,
			SELECT ABRTOS_LOG_TEMP
				
					
				
					
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 4
			PRINT "STACK"	,
			SELECT ABRTOS_LOG_TEMP
				
					
				
					
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 5
			PRINT "MUTEX"	,
			SELECT ABRTOS_LOG_TEMP
				
					
				
					
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 6
			PRINT "MEM  "		,
			SELECT ABRTOS_LOG_TEMP
				
					
				
					
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 7
			PRINT "MSGS "		,
			SELECT ABRTOS_LOG_TEMP
				
					
				
					
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 8
			PRINT "SEMA "		,
			SELECT ABRTOS_LOG_TEMP
				CASE 0
					PRINT "ABRTOS_SEMA_SETUP_STARTED"
				CASE 1
					PRINT "ABRTOS_SEMA_SETUP_COMPLETE"
				CASE 2
					PRINT "ABRTOS_SEMA_INITSEMA_STARTED"
				CASE 3
					PRINT "ABRTOS_SEMA_INITSEMA_SEMAINITOK"
				CASE 4
					PRINT "ABRTOS_SEMA_INITSEMA_SEMAINITERR"
				CASE 5
					PRINT "ABRTOS_SEMA_INITSEMA_SEMANUMOOR"
				CASE 6
					PRINT "ABRTOS_SEMA_INITSEMA_COMPLETE"
				CASE 7
					PRINT "ABRTOS_SEMA_XGET_SEMA_STARTED"
				CASE 8
					PRINT "ABRTOS_SEMA_XGET_OK_DECREMENTED"
				CASE 9
					PRINT "ABRTOS_SEMA_XGET_BUSY_WAIT"
				CASE 10
					PRINT "ABRTOS_SEMA_XGET_UNINITIALIZED"
				CASE 11
					PRINT "ABRTOS_SEMA_XGET_SEMANUMOOR"
				CASE 12
					PRINT "ABRTOS_SEMA_XGET_SEMA_COMPLETED"
				CASE 13
					PRINT "ABRTOS_SEMA_GET_SEMA_STARTED"
				CASE 14
					PRINT "ABRTOS_SEMA_GET_OK"
				CASE 15
					PRINT "ABRTOS_SEMA_GET_BUSY_WAIT"
				CASE 16
					PRINT "ABRTOS_SEMA_GET_SEMANUMOOR"
				CASE 17
					PRINT "ABRTOS_SEMA_GET_SEMA_UNINITD"
				CASE 18
					PRINT "ABRTOS_SEMA_GET_SEMA_COMPLETED"
				CASE 19
					PRINT "ABRTOS_SEMA_INITSEMA_BADPRAMS"
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 9
			PRINT "SCHED"	,
			SELECT ABRTOS_LOG_TEMP
				CASE 0
					PRINT "ABRTOS_SCHED_ITERATE_START"
				CASE 1
					PRINT "ABRTOS_SCHED_ITERATE_FINISH"
				CASE 2
					PRINT "ABRTOS_SCHED_START_START"
				CASE 3
					PRINT "ABRTOS_SCHED_START_FINISH"
				CASE 4
					PRINT "ABRTOS_SCHED_STOP_START"
				CASE 5
					PRINT "ABRTOS_SCHED_STOP_FINISH"
				CASE 6
					PRINT "ABRTOS_SCHED_ITERATED"
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 10
			PRINT "TASKS"	,
			SELECT ABRTOS_LOG_TEMP
				CASE 0
					PRINT "ABRTOS_TASK_INIT_STARTED"
				CASE 1
					PRINT "ABRTOS_TASK_INIT_COMPLETED"
				CASE 2
					PRINT "ABRTOS_TASK_CURRENT_SUSPEND_STARTED"
				CASE 3
					PRINT "ABRTOS_TASK_CURRENT_SUSPEND_COMPLETED"
				CASE 4
					PRINT "ABRTOS_TASK_CURRENT_WAITSEMA_STARTED"
				CASE 5
					PRINT "ABRTOS_TASK_CURRENT_WAITSEMA_COMPLETED"
				CASE 6
					PRINT "ABRTOS_TASK_CURRENT_KILL_STARTED"
				CASE 7
					PRINT "ABRTOS_TASK_CURRENT_KILL_COMPLETED"
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 11
			PRINT "EVENT"	,
			SELECT ABRTOS_LOG_TEMP
				
					
				
					
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 12
			PRINT "INT  "		,
			SELECT ABRTOS_LOG_TEMP
				CASE 0
					PRINT "ABRTOS_INT_SWI_SETUP_STARTED"
				CASE 1
					PRINT "ABRTOS_INT_SWI_SETUP_COMPLETE"
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE 13
			PRINT "INIT "		,
			SELECT ABRTOS_LOG_TEMP
				CASE 0
					PRINT "ABRTOS_INIT_STARTUP_STARTED"
				CASE 1
					PRINT "ABRTOS_INIT_STARTUP_COMPLETE"
				CASE ELSE
					PRINT "UN-DEFINED EVENT: $",ABRTOS_LOG_TEMP_STR
			ENDSELECT
		CASE ELSE
			PRINT "UM, UNKNOWN MODULE",
	ENDSELECT	

	
	
ENDSUB


	




DIM ABRTOS_INT_ENA_CACHE AS INTEGER

SUB	ABRTOS_INT_DISABLE

	ABRTOS_INT_ENA_CACHE = *$FFFFF010	
	*$FFFFF014 = $FFFFFFFF			

ENDSUB

SUB	ABRTOS_INT_ENABLE

	*$FFFFF010 = ABRTOS_INT_ENA_CACHE	

ENDSUB

INTERRUPT SUB ABRTOS_INT_SWI_ISR

	
	
	
	
	
	
	
	
	
	



	
	
		ABRTOS_LOG_ISR_HANDLER
	
	
	*$FFFFF01C = $2	
	*$FFFFF030 = 0		

ENDSUB

SUB	ABRTOS_INT_SWI_SETUP

		
		ABRTOS_LOG_EVENT(12,0)
	
	ABRTOS_INT_DISABLE
	
		*$FFFFF108 = ADDRESSOF ABRTOS_INT_SWI_ISR			
		*$FFFFF208 = $21									
		ABRTOS_INT_ENA_CACHE = ABRTOS_INT_ENA_CACHE OR 2	
	
	ABRTOS_INT_ENABLE
	
		
		ABRTOS_LOG_EVENT(12,1)
	
ENDSUB

SUB ABRTOS_INT_TEST_ISR





ENDSUB

SUB	ABRTOS_INT_SWI2_SETUP

		
	
		
	
	
	ABRTOS_INT_DISABLE
	
	*$FFFFF108 = ADDRESSOF ABRTOS_INT_TEST_ISR		
	*$FFFFF208 = $21									
	ABRTOS_INT_ENA_CACHE = ABRTOS_INT_ENA_CACHE OR 2	

	ABRTOS_INT_ENABLE
	
		
	
		
	
	
ENDSUB


	




FUNCTION ABRTOS_WDT_PRIV_GET_TC_REG AS INTEGER

	RETURN *$E0000004 	

ENDFUNCTION



FUNCTION ABRTOS_WDT_PRIV_GET_TIME_REG AS INTEGER

	RETURN *$E000000C 	

ENDFUNCTION



FUNCTION ABRTOS_WDT_PRIV_SET_TC_REG(ABRTOS_WDT_TC AS INTEGER) AS INTEGER

	*$E0000004 	 = ABRTOS_WDT_TC
	RETURN ABRTOS_WDT_PRIV_GET_TC_REG
	
ENDFUNCTION



FUNCTION ABRTOS_WDT_PRIV_GET_STATE AS INTEGER

	RETURN *$E0000000 	
	
ENDFUNCTION



SUB ABRTOS_WDT_FEED_THE_DOG

	*$E0000008	 = $AA
	*$E0000008	 = $55
	
		ABRTOS_LOG_EVENT(2,12)
	

ENDSUB



FUNCTION ABRTOS_WDT_MS_WDTC AS INTEGER






		RETURN (ABRTOS_WDT_PRIV_GET_TC_REG / $EA6		)

ENDFUNCTION



FUNCTION ABRTOS_WDT_SET_WDTC(ABRTOS_WDT_TC_MS AS INTEGER) AS INTEGER









	IF ABRTOS_WDT_TC_MS < 1 THEN
		ABRTOS_WDT_TC_MS = 1
	ELSEIF ABRTOS_WDT_TC_MS > 1145324
		ABRTOS_WDT_TC_MS = 1145324
	ENDIF


	
	IF (ABRTOS_WDT_PRIV_SET_TC_REG(ABRTOS_WDT_TC_MS * $EA6		)) <> (ABRTOS_WDT_TC_MS * $EA6		) THEN
		
		RETURN -1
	ELSE
		RETURN ABRTOS_WDT_MS_WDTC
	ENDIF

ENDFUNCTION



FUNCTION ABRTOS_WDT_MS_TO_UNDERFLOW AS INTEGER


	RETURN (ABRTOS_WDT_PRIV_GET_TIME_REG / $EA6		)

ENDFUNCTION



FUNCTION ABRTOS_WDT_TO_FLAG(ABRTOS_CLEAR_WDTOF AS INTEGER) AS INTEGER














	IF (ABRTOS_WDT_PRIV_GET_STATE AND $0C AND $04) THEN
		IF ABRTOS_CLEAR_WDTOF THEN *$E0000000 	 = *$E0000000 	 AND $03
		RETURN 1
	ELSE
		RETURN 0
	ENDIF

ENDFUNCTION



FUNCTION ABRTOS_WDT_INT_FLAG AS INTEGER










	IF (ABRTOS_WDT_PRIV_GET_STATE AND $0C AND $08) THEN
		RETURN 1
	ELSE
		RETURN 0
	ENDIF

ENDFUNCTION



FUNCTION ABRTOS_WDT_STATUS

	RETURN ABRTOS_WDT_PRIV_GET_STATE AND $0C
	
ENDFUNCTION



FUNCTION ABRTOS_WDT_MODE

	RETURN (ABRTOS_WDT_PRIV_GET_STATE AND $03)

ENDFUNCTION



FUNCTION ABRTOS_WDT_SET_MODE(ABRTOS_WDT_MD AS INTEGER) AS INTEGER
		
		ABRTOS_LOG_EVENT(2,10)
	
	SELECT ABRTOS_WDT_MD
	
		CASE $00		
				
				
				
				
				
				
				
				
			*$E0000000 	 = ($03 AND $00		)
			IF ABRTOS_WDT_MODE <> $00		 THEN
				RETURN -1
			ENDIF
			
		CASE $01
			*$E0000000 	 = ($03 AND $01)
			IF ABRTOS_WDT_MODE <> $01 THEN
				
				
				
				
				
				
				RETURN -1  
			ENDIF
			
		CASE ($01 + $02)
			*$E0000000 	 = ($03 AND ($01 + $02))
			IF ABRTOS_WDT_MODE <> ($01 + $02) THEN
				
				
				
				
				
				
				RETURN -1
			ENDIF
			
		CASE ELSE
			RETURN -1
			
	ENDSELECT
		
		ABRTOS_LOG_EVENT(2,11)
	
	RETURN ABRTOS_WDT_MODE

ENDFUNCTION



SUB ABRTOS_WDT_POSTRESET_HANDLER

	PRINT
	PRINT "A WATCHDOG RESET TOOK PLACE..."
	ABRTOS_WDT_TO_FLAG(1)
	PRINT "WATCHDOG TIMEOUT FLAG IS NOW CLEARED."
	PRINT

ENDSUB



SUB ABRTOS_WDT_POSTINT_HANDLER

	PRINT
	ABRTOS_WDT_TO_FLAG(1)  
					
	PRINT "THE WATCHDOG DID NOT GET FED IN TIME AND AS A RESULT,"
	PRINT "A WATCHDOG UNDERFLOW TOOK PLACE, TOSSING AN WDINT..."
	PRINT

ENDSUB



SUB ABRTOS_WDT_RESET


		
		ABRTOS_LOG_EVENT(2,2)
	
	ABRTOS_WDT_PRIV_SET_TC_REG($FF)
	ABRTOS_WDT_SET_MODE(($01 + $02))
	ABRTOS_WDT_FEED_THE_DOG
		
		ABRTOS_LOG_EVENT(2,3)
	
ENDSUB



SUB ABRTOS_WDT_STARTUP_CHECK
		
		ABRTOS_LOG_EVENT(2,4)
	

	IF ABRTOS_WDT_INT_FLAG THEN
		ABRTOS_WDT_POSTINT_HANDLER
		ABRTOS_STOP_FLAG = 1
		
	ELSEIF ABRTOS_WDT_TO_FLAG(0) THEN 
		ABRTOS_WDT_POSTRESET_HANDLER
		ABRTOS_STOP_FLAG = 1
		
	ENDIF
		
		ABRTOS_LOG_EVENT(2,5)
		
ENDSUB



SUB ABRTOS_WDT_SETUP
		
		ABRTOS_LOG_EVENT(2,0)
	
	ABRTOS_WDT_SET_WDTC(10000 	)
	ABRTOS_WDT_SET_MODE(($01 + $02))
		
		ABRTOS_LOG_EVENT(2,1)
	
ENDSUB



SUB ABRTOS_WDT_START
		
		ABRTOS_LOG_EVENT(2,6)
	
	ABRTOS_WDT_FEED_THE_DOG
		
		ABRTOS_LOG_EVENT(2,7)
	
ENDSUB



SUB ABRTOS_WDT_FEED
		
		ABRTOS_LOG_EVENT(2,8)
	
	ABRTOS_WDT_FEED_THE_DOG
		
		ABRTOS_LOG_EVENT(2,9)
	
ENDSUB




	
	
	








		


SUB ABRTOS_TASK_INITTASKMGMT
		
		ABRTOS_LOG_EVENT(10,0)
	
	
		
		ABRTOS_LOG_EVENT(10,1)
	
ENDSUB

SUB ABRTOS_TASK_STARTINITTASK (START_TASK_ID,START_TASK_PRIO)

ENDSUB



	


	
	


SUB ABRTOS_TASK_CURRENT_SUSPEND
		
		ABRTOS_LOG_EVENT(10,2)
	
	
		
		ABRTOS_LOG_EVENT(10,3)
	
ENDSUB

SUB ABRTOS_TASK_CURRENT_KILL
		
		ABRTOS_LOG_EVENT(10,6)
	
	
		
		ABRTOS_LOG_EVENT(10,7)
	
ENDSUB

SUB ABRTOS_TASK_CURRENT_WAITSEMA
		
		ABRTOS_LOG_EVENT(10,4)
	
	
	
		
		ABRTOS_LOG_EVENT(10,5)
	
ENDSUB



		










	
	
	

		
		
	DIM ABRTOS_SEMA_BLOCK(11  	) AS INTEGER				
	DIM ABRTOS_SEMA_SEMAPHORE_VALUE(5) AS INTEGER		 
	DIM ABRTOS_SEMA_SEMAPHORE_MAXVALUE(5) AS INTEGER	 
	DIM ABRTOS_SEMA_SEMAPHORE_QUEPTR(5) AS INTEGER		 
	

SUB ABRTOS_SEMA_STARTUP_INIT

	DIM ABRTOS_SEMA_COUNTER AS INTEGER
	DIM ABRTOS_SEMA_TEMPPOINTER AS INTEGER

	
	
	
	
	
	
	
		ABRTOS_LOG_EVENT(8,0)

	FOR ABRTOS_SEMA_COUNTER = 0 TO (6		-1)
	
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_QUEPTR) + (ABRTOS_SEMA_COUNTER * 4)
		*ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_BLOCK) + (ABRTOS_SEMA_COUNTER * 8  	)
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_VALUE) + (ABRTOS_SEMA_COUNTER * 4)
		*ABRTOS_SEMA_TEMPPOINTER = -1
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_MAXVALUE) + (ABRTOS_SEMA_COUNTER * 4)
		*ABRTOS_SEMA_TEMPPOINTER = 0
		
	NEXT ABRTOS_SEMA_COUNTER
	
		ABRTOS_LOG_EVENT(8,1)
	
ENDSUB

FUNCTION ABRTOS_SEMA_INIT_SEMAPHORE(SEMA_ID, CURR_COUNT, MAX_COUNT)

	DIM ABRTOS_SEMA_INIT_RETURN_VAL AS INTEGER
	DIM ABRTOS_SEMA_TEMPPOINTER AS INTEGER
	
		ABRTOS_LOG_EVENT(8,2)
	
	IF (SEMA_ID < 0) OR (SEMA_ID > (6		-1)) THEN
		ABRTOS_SEMA_INIT_RETURN_VAL = -1
		
		ABRTOS_LOG_EVENT(8,5)
		
		ABRTOS_TASK_CURRENT_KILL
	ELSEIF (CURR_COUNT <= 0) OR (MAX_COUNT <= 0) OR (MAX_COUNT < CURR_COUNT) THEN
		ABRTOS_SEMA_INIT_RETURN_VAL = -1
		
		ABRTOS_LOG_EVENT(8,19)
	
		
		ABRTOS_TASK_CURRENT_KILL
		
	ELSE
	
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_VALUE) + (SEMA_ID * 4)
		IF *ABRTOS_SEMA_TEMPPOINTER <> -1 THEN 
			ABRTOS_SEMA_INIT_RETURN_VAL = 0
			
			ABRTOS_LOG_EVENT(8,4)
		
		
		ABRTOS_TASK_CURRENT_KILL
		ELSE	
			*ABRTOS_SEMA_TEMPPOINTER = CURR_COUNT
			ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_MAXVALUE) + (SEMA_ID * 4)
			*ABRTOS_SEMA_TEMPPOINTER = MAX_COUNT
			ABRTOS_SEMA_INIT_RETURN_VAL = CURR_COUNT
			
			ABRTOS_LOG_EVENT(8,3)
		
		ENDIF
	ENDIF

			ABRTOS_LOG_EVENT(8,6)
	
	RETURN ABRTOS_SEMA_INIT_RETURN_VAL
			
			
			
ENDFUNCTION

FUNCTION ABRTOS_SEMA_XGET_SEMAPHORE(SEMA_ID)

	DIM ABRTOS_SEMA_XGET_RETURN_VAL AS INTEGER
	DIM ABRTOS_SEMA_TEMPPOINTER AS INTEGER
	
		
		ABRTOS_LOG_EVENT(8,7)
	
	
	
	
		
		
		
	
		ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_VALUE) + (SEMA_ID * 4)
		IF *ABRTOS_SEMA_TEMPPOINTER > 0 THEN	
			*ABRTOS_SEMA_TEMPPOINTER = *ABRTOS_SEMA_TEMPPOINTER - 1
			ABRTOS_SEMA_XGET_RETURN_VAL = 1
		
		ABRTOS_LOG_EVENT(8,8)
	
		ELSEIF *ABRTOS_SEMA_TEMPPOINTER = 0 THEN 
			ABRTOS_SEMA_TEMPPOINTER = (ADDRESSOF ABRTOS_SEMA_SEMAPHORE_QUEPTR) + (SEMA_ID * 4)
			ABRTOS_SEMA_TEMPPOINTER = *ABRTOS_SEMA_TEMPPOINTER + ((ABRTOS_TASK_ACTIVEID/32)*4)
			*ABRTOS_SEMA_TEMPPOINTER = *ABRTOS_SEMA_TEMPPOINTER OR (1 << (ABRTOS_TASK_ACTIVEID MOD 32))
			ABRTOS_SEMA_XGET_RETURN_VAL = 0
		
		ABRTOS_LOG_EVENT(8,9)
	
		ELSE	
			
			ABRTOS_SEMA_XGET_RETURN_VAL = -1
		
		ABRTOS_LOG_EVENT(8,10)
	
		ENDIF
	

		
		ABRTOS_LOG_EVENT(8,12)
		
	RETURN ABRTOS_SEMA_XGET_RETURN_VAL
			
			
			

ENDFUNCTION

SUB ABRTOS_SEMA_GET_SEMAPHORE(SEMA_ID)

		
		ABRTOS_LOG_EVENT(8,13)

	IF (SEMA_ID < 0) OR (SEMA_ID > (6		-1)) THEN
		
		ABRTOS_LOG_EVENT(8,16)
	
		
		ABRTOS_TASK_CURRENT_KILL
	ELSE
		DIM ABRTOS_SEMA_GET_TEMP AS INTEGER
		ABRTOS_SEMA_GET_TEMP = ABRTOS_SEMA_XGET_SEMAPHORE(SEMA_ID)
		IF ABRTOS_SEMA_GET_TEMP < 0 THEN
		
		ABRTOS_LOG_EVENT(8,17)
	
			
			ABRTOS_TASK_CURRENT_KILL
		ELSEIF ABRTOS_SEMA_GET_TEMP = 0 THEN
		
		ABRTOS_LOG_EVENT(8,15)
	
			
			ABRTOS_TASK_CURRENT_WAITSEMA
		ELSE
		
		ABRTOS_LOG_EVENT(8,14)
	
		ENDIF
	ENDIF
	
		
		ABRTOS_LOG_EVENT(8,18)
		
ENDSUB

SUB ABRTOS_SEMA_XPUT_SEMAPHORE


ENDSUB

SUB ABRTOS_SEMA_PUT_SEMAPHORE


ENDSUB




		




SUB ABRTOS_SCHED_ITERATE
		
		
	
	
		
		
		
	
		
	
	
ENDSUB

SUB	ABRTOS_SCHED_START
		
		ABRTOS_LOG_EVENT(9,2)
	
		ABRTOS_WDT_START
	
	
	
	ON TIMER 10		 ABRTOS_SCHED_ITERATE
		
		ABRTOS_LOG_EVENT(9,3)
		
ENDSUB

SUB ABRTOS_SCHED_STOP
		
		ABRTOS_LOG_EVENT(9,4)
	
	*$FFFFF014 = $20
	
	
		
		ABRTOS_LOG_EVENT(9,5)
		
ENDSUB




SUB ABRTOS_INIT_STARTUP

	
	
	
	
	
		ABRTOS_LOG_INIT
	
	ABRTOS_INT_SWI_SETUP
	
	ABRTOS_TASK_ACTIVEID = -1
	
		
		ABRTOS_LOG_EVENT(13,0)
	
	ABRTOS_SEMA_STARTUP_INIT

	ABRTOS_WDT_STARTUP_CHECK
	ABRTOS_WDT_SETUP
	
		
		ABRTOS_LOG_EVENT(13,1)
	
ENDSUB

	



MAIN:

	TIMER = 0

	ABRTOS_INIT_STARTUP
	
	ABRTOS_TASK_INITTASKMGMT
	
	ABRTOS_SCHED_START
	
	ABRTOS_TASK_ACTIVEID = 0

	ABRTOS_SEMA_INIT_SEMAPHORE(0, 2, 2)
	ABRTOS_SEMA_INIT_SEMAPHORE(1, 2, 2)
	ABRTOS_SEMA_INIT_SEMAPHORE(2, 2, 2)
	ABRTOS_SEMA_INIT_SEMAPHORE(3, 2, 2)
	ABRTOS_SEMA_INIT_SEMAPHORE(4, 2, 2)
	
	ABRTOS_TASK_ACTIVEID = 1
	ABRTOS_SEMA_INIT_SEMAPHORE(0, 2, 2)
	
	ABRTOS_TASK_ACTIVEID = 2
	ABRTOS_SEMA_GET_SEMAPHORE(0)
	ABRTOS_TASK_ACTIVEID = 3
	ABRTOS_SEMA_GET_SEMAPHORE(1)
	ABRTOS_TASK_ACTIVEID = 4
	ABRTOS_SEMA_GET_SEMAPHORE(2)
	ABRTOS_TASK_ACTIVEID = 5
	ABRTOS_SEMA_GET_SEMAPHORE(3)
	ABRTOS_TASK_ACTIVEID = 6
	ABRTOS_SEMA_GET_SEMAPHORE(4)
	ABRTOS_TASK_ACTIVEID = 32
	ABRTOS_SEMA_GET_SEMAPHORE(0)
	ABRTOS_TASK_ACTIVEID = 11
	ABRTOS_SEMA_GET_SEMAPHORE(0)
	ABRTOS_TASK_ACTIVEID = 7
	ABRTOS_SEMA_GET_SEMAPHORE(0)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	DO
	LOOP
	
	ABRTOS_SCHED_STOP
	
	PRINT "ABRTOS EXITING.  GOOD BYE"
	
END

